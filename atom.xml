<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Air&#39;s Notebook</title>
  
  <subtitle>Just notebook</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-06-06T13:08:22.488Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Air</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Side Window Filtering</title>
    <link href="http://yoursite.com/2020/06/06/Side-Window-Filtering/"/>
    <id>http://yoursite.com/2020/06/06/Side-Window-Filtering/</id>
    <published>2020-06-06T12:58:38.000Z</published>
    <updated>2020-06-06T13:08:22.488Z</updated>
    
    <content type="html"><![CDATA[<p>发表在 <a href="http://cvpr2019.thecvf.com/" target="_blank" rel="noopener">CVPR 2019 Oral</a> <sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></p><p><a href="https://arxiv.org/pdf/1905.07177.pdf" target="_blank" rel="noopener">原文 pdf 链接</a></p><p><a href="https://zhuanlan.zhihu.com/p/58326095" target="_blank" rel="noopener">作者在知乎上的介绍</a></p><h2 id="Algorithm"><a class="header-anchor" href="#Algorithm">¶ </a>Algorithm</h2><p>give $I$ such that <strong>minimize</strong> cost function $E$.</p><p>where</p><ul><li>$I = \frac{1}{N_n} \sum{\omega \cdot q}$</li><li>$E = || q - I ||_2^2$</li><li>possible windows: $S = {L, R, U, D, NW, NE, SW, SE}$</li><li>input of pixel: $q$, output of pixel: $I$</li><li>local window: $\Omega$, pixel in window $\Omega$: $q$, kernel_weight: $\omega$</li></ul><h2 id="Background"><a class="header-anchor" href="#Background">¶ </a>Background</h2><h3 id="Edge-preserving-filters"><a class="header-anchor" href="#Edge-preserving-filters">¶ </a>Edge-preserving filters</h3><p>Two categories</p><h4 id="global-optimization-based-algorithms"><a class="header-anchor" href="#global-optimization-based-algorithms">¶ </a>global optimization based algorithms</h4><ul><li>total variation (TV) algorithm</li><li>iterative shrinkage approach</li><li>relative total variation algorithm</li><li>weighted least squares algorithm</li></ul><h4 id="local-optimization-based-algorithms"><a class="header-anchor" href="#local-optimization-based-algorithms">¶ </a>local optimization based algorithms</h4><ul><li>bilateral filter 双边滤波器<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></li><li>bilateral filter accelerated versions</li><li>guided filter 导向滤波</li><li>guided filter extensions</li><li>rolling guidance filter</li><li>mutual structure joint filtering</li><li>curvature filter<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup></li></ul><h3 id="Filtering-Fundamentals"><a class="header-anchor" href="#Filtering-Fundamentals">¶ </a>Filtering Fundamentals</h3><h4 id="common-assume"><a class="header-anchor" href="#common-assume">¶ </a>common assume</h4><ul><li><p>image is <strong>piecewise</strong> linear</p></li><li><p>approximate a pixel as the weighted average of its neighbor pixels over a local window<br>$$<br>I_i’ = \sum_{j \in \Omega_i} \omega_{ij} q_j<br>$$</p></li></ul><h4 id="cost-function"><a class="header-anchor" href="#cost-function">¶ </a>cost function</h4><p>$$<br>E_i = { {|| I_i - I_i’ ||}_2 }^2<br>$$</p><p>$$<br>= (I_i - \sum_{j \in \Omega_i} \omega_{ij} q_j) ^ 2<br>$$</p><h4 id="trade-off"><a class="header-anchor" href="#trade-off">¶ </a>trade off</h4><ol><li>manipulating the input image towards a desired target 去噪声</li><li>keeping it close to the original 保真</li></ol><h3 id="Type-of-typical-edges"><a class="header-anchor" href="#Type-of-typical-edges">¶ </a>Type of typical edges <sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup></h3><ul><li><p>step edge</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">     ┌─────</span><br><span class="line">     │</span><br><span class="line">     │</span><br><span class="line">     │</span><br><span class="line">─────┘</span><br></pre></td></tr></table></figure></li><li><p>ramp edge</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">          ┌─────</span><br><span class="line">         &#x2F;</span><br><span class="line">       &#x2F;</span><br><span class="line">      &#x2F;</span><br><span class="line">─────┘</span><br></pre></td></tr></table></figure></li><li><p>roof edge</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    &#x2F;\</span><br><span class="line">   &#x2F;  \</span><br><span class="line">  &#x2F;    \</span><br><span class="line"> &#x2F;      \</span><br><span class="line">&#x2F;        \</span><br></pre></td></tr></table></figure></li><li><p>line edge</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">     ┌─┐</span><br><span class="line">     │ │</span><br><span class="line">     │ │</span><br><span class="line">     │ │</span><br><span class="line">─────┘ └─────</span><br></pre></td></tr></table></figure></li></ul><p>这些函数是连续但不可导的（考虑$|x|$）</p><h2 id="Anything"><a class="header-anchor" href="#Anything">¶ </a>Anything</h2><ul><li><em>1.2. Problem and Motivation</em> 部分用 $g(x, y)$ 和 <em>Taylor expansion</em> 来说明在边缘处，两侧点的取值差距较大。因此跳跃点两侧应当分开来进行考虑。</li></ul><h3 id="Definition-of-side-window"><a class="header-anchor" href="#Definition-of-side-window">¶ </a>Definition of side window</h3><ul><li><p><em>2. Side Window Filtering Technique</em> 中对参数 $\varphi$ 的说明不足。如下图所示，论文中认为 $OD$ 是定长 $r$，矩形 $Q$ 是固定的；而 $OA$ 为变长 $\varphi$，矩形 $P$ 是可伸缩的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">A┌─────┐B</span><br><span class="line"> │  P  │</span><br><span class="line">O├─────┤E</span><br><span class="line"> │  Q  │</span><br><span class="line">D└─────┘C</span><br></pre></td></tr></table></figure></li><li><p>论文中认为 $OE$ 线条的宽度为 $1$ 像素，而其他线条宽度为 $0$</p></li></ul><h2 id="I-Don’t-Understand"><a class="header-anchor" href="#I-Don’t-Understand">¶ </a>I Don’t Understand</h2><blockquote><p>It is worth noting that optimization problem of the form similar<br>to eq. (2) is found in many applications including coloriza-<br>tion [14][22] and image segmentation [25][28], where the<br>weight functions are usually referred to as affinity functions.<br>Nonlinear approximation filtering such as median filtering<br>can also be formulated as a similar form of optimization<br>problem</p></blockquote><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>What is Oral? <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p><a href="https://zh.wikipedia.org/zh-cn/%E5%8F%8C%E8%BE%B9%E6%BB%A4%E6%B3%A2%E5%99%A8" target="_blank" rel="noopener">https://zh.wikipedia.org/zh-cn/双边滤波器</a> <a href="#fnref2" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p><a href="https://github.com/YuanhaoGong/CurvatureFilter" target="_blank" rel="noopener">https://github.com/YuanhaoGong/CurvatureFilter</a> <a href="#fnref3" class="footnote-backref">↩︎</a></p></li><li id="fn4" class="footnote-item"><p><a href="https://www.researchgate.net/figure/Type-of-Edges-a-Step-Edge-b-Ramp-Edge-c-Line-Edge-d-Roof-Edge_fig1_228349759" target="_blank" rel="noopener">https://www.researchgate.net/figure/Type-of-Edges-a-Step-Edge-b-Ramp-Edge-c-Line-Edge-d-Roof-Edge_fig1_228349759</a> <a href="#fnref4" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;发表在 &lt;a href=&quot;http://cvpr2019.thecvf.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CVPR 2019 Oral&lt;/a&gt; &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn1&quot; id=&quot;
      
    
    </summary>
    
    
    
      <category term="computer vision" scheme="http://yoursite.com/tags/computer-vision/"/>
    
      <category term="denoise" scheme="http://yoursite.com/tags/denoise/"/>
    
      <category term="filter" scheme="http://yoursite.com/tags/filter/"/>
    
  </entry>
  
  <entry>
    <title>Side Window Filtering 调研报告</title>
    <link href="http://yoursite.com/2020/06/06/Side-Window-Filtering-%E8%B0%83%E7%A0%94%E6%8A%A5%E5%91%8A/"/>
    <id>http://yoursite.com/2020/06/06/Side-Window-Filtering-%E8%B0%83%E7%A0%94%E6%8A%A5%E5%91%8A/</id>
    <published>2020-06-06T12:49:23.000Z</published>
    <updated>2020-06-06T13:05:08.403Z</updated>
    
    <content type="html"><![CDATA[<p>这是计算机视觉的课程作业</p><h2 id="Introduction"><a class="header-anchor" href="#Introduction">¶ </a>Introduction</h2><h3 id="Background"><a class="header-anchor" href="#Background">¶ </a>Background</h3><p>图像滤波在图像处理领域十分重要。数十年来，有许多的滤波算法/滤波器被提出，他们被广泛用于图像去模糊、图像锐化、边缘检测和特征提取。</p><p>有许多应用用到了滤波器的一个重要特性——<strong>边缘保留</strong>（edge-preserving）。边缘保留希望图像中的边缘在经过滤波器处理后能尽可能得被保留下来，不至于显得过于模糊。这一类滤波器通常可以被分为两类，</p><ol><li>一类是<strong>全局优化</strong>性算法（global optimization based algorithms），比如total variation算法，iterative shrinkage approach算法，relative total variation算法，weighted least squares算法；</li><li>另一类是<strong>局部优化</strong>性算法（local optimization based algorithms），例如双边滤波算法（Bilateral Filters），导向滤波算法，mutual structure joint算法，curvature算法。</li></ol><p>下面我们讨论局部优化性的滤波算法。这类算法通常是输入一个中心像素以及它的一些邻近像素，然后输出一个处理后的结果像素。这其中的处理过程，有线性的处理方式，例如均值滤波、高斯滤波，也有非线性的处理方式，例如中值滤波、双边滤波。下面我们考虑<strong>线性的局部优化滤波器</strong>。</p><p>线性的局部优化滤波器通常有以下两个假设</p><ol><li><p>图像是分段局部（piecewice）线性的</p></li><li><p>算法的输出是原像素在一个局部窗口中的邻近像素的加权和。如果用式子表示即：<br>$$<br>I_i’ = \sum_{j \in \Omega_i} \omega_{ij} q_j<br>$$<br>其中 $i$ 是原像素在原图像中的坐标，$I_i’$是输出像素，$\omega_i$ 是局部窗口， $j$ 是邻近像素 $q$ 在局部窗口 $\omega$ 中的坐标， $q_j$ 是邻近像素， $\omega_{ij}$ 是邻近像素 $q_{ij}$ 在窗口中被赋予的权值。</p></li></ol><p>而滤波器输出的结果与原图像之间的差异通常用以下用二范数表示的损失函数（lost function）来描述：</p><p>$$<br>E_i = {|| I_i - I_i’ ||}_2^2<br>$$</p><p>具体到线性的局部优化滤波器的情况，这个式子为</p><p>$$<br>E_i = {(I_i - \sum_{j \in \Omega_i} \omega_{ij} q_j)}^ 2<br>$$</p><h3 id="Problem-and-Motivation"><a class="header-anchor" href="#Problem-and-Motivation">¶ </a>Problem and Motivation</h3><p>对于线性局部优化滤波器，我们考虑如下图所示的三种“边缘”：阶梯形边缘（step edge），坡形边缘（ramp edge），屋顶形边缘（roof edge）。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="edges.png" alt="edges" title="">                </div>                <div class="image-caption">edges</div>            </figure><p>图中每一个格点代表一个像素，格点在三维空间中的高低代表像素值（可能是灰度值，某一通道的像素值）的大小。可以看到图中的像素值变化剧烈，这即是图像中的边缘。而且可以注意到由于边缘的存在，这些图像是连续但<strong>不可微</strong>的。图中的矩形则表示局部优化滤波器在运算时所用的局部窗口（对应前文中的 $\omega$）。由于通常的局部优化滤波器是取<strong>以当前像素为中心的正方形作为窗口</strong> $\omega$， 因此对于阶梯形边缘的情况，像素 $a$ 对应的窗口就是图中红蓝两个矩形的拼接。</p><p>下面<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>我们用 $g(x,y)$ 来代表在图像 $(x,y)$ 坐标处的原像素的值，易知在图中所示的边缘点附近，有<br>$$<br>g(x+\epsilon, y) \neq g(x-\epsilon, y)<br>$$<br>或是<br>$$<br>g’(x+\epsilon, y) \neq g’(x-\epsilon, y)<br>$$<br>如果在 $(x+\epsilon, y)$ 和 $(x-\epsilon, y)$ 处进行 <em>Taylor</em> 展开<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>，并分别代入 $x-2\epsilon, x+2\epsilon$ 易得<br>$$<br>g(x−2\epsilon, y) \approx g(x−\epsilon, y) +  \frac{\partial}{\partial x} g(x−\epsilon, y) \cdot (−\epsilon)<br>$$<br>和<br>$$<br>g(x+2\epsilon, y) \approx g(x+\epsilon, y) + \frac{\partial}{\partial x} g(x+\epsilon, y) \cdot \epsilon<br>$$</p><p>以阶梯状边缘为例，结合上两式可以看到，点 $a$ 左侧点的像素值应该仅与 $a$ 左侧的点相关，$b$ 右侧的点的像素值也仅与 $b$ 右侧的点相关。再结合上文，由于一般的滤波器以当前像素为中心的<strong>正方形</strong>区域作为窗口，而在图像的边缘附近，这种方法不可避免地将不相关的一大部分像素点包括到计算之中，这样往往会造成边缘的像素发生扩散，显得非常模糊。</p><p>事实上我们可以调整窗口的大小，使其不再是一个完整的正方形，而是缩减为与当前像素点相关性更高的区域，例如在阶梯状边缘中，我们针对 $a$ 点就将窗口区域缩减为蓝色矩形，针对 $b$ 点就缩减为是红色矩形。这就是我们的<strong>侧边窗口滤波</strong>的思想。</p><h2 id="Algorithm"><a class="header-anchor" href="#Algorithm">¶ </a>Algorithm</h2><h3 id="Core"><a class="header-anchor" href="#Core">¶ </a>Core</h3><p>这一章我们介绍核心算法。</p><p>传统的线性局部优化滤波器的窗口是一当前像素为中心的一个正方形，而在侧边窗口滤波算法中，窗口有八种选择（事实上不仅限于这八种，这个算法是容易被拓展的）。如下图所示，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">┏━━━┯━━━┓</span><br><span class="line">┃ A │ B ┃</span><br><span class="line">┠───┼───┨</span><br><span class="line">┃ D │ C ┃</span><br><span class="line">┗━━━┷━━━┛</span><br></pre></td></tr></table></figure><p>我们将原先的正方形四等分为 $A, B, C, D$ 四个正方形，那么窗口的八种选择即 ${A, B, C, D, AB, BC , CD, DA }$ 。</p><p>算法将遍历八个窗口，最终选出一个窗口使得以下值最小<br>$$<br>E_i = \frac{1}{N_A} (I_i - \sum_{j \in \Omega_i} \omega_{ij} q_j) ^ 2<br>$$<br>其中 $N_A = \sum_{j \in {\Omega_i}} \omega_{ij}$ （这里 $\frac{1}{N_A}$ 的作用是归一化）。</p><h3 id="Analysis"><a class="header-anchor" href="#Analysis">¶ </a>Analysis</h3><p>由于我们的新算法只涉及对窗口的选取，所以很容易被附加到现有的一般算法上。</p><p>首先我们在盒子滤波（均值滤波 Box filter）上应用了我们的算法，然后在一些典型的样例上进行了测试。如下图所示，每三个横向的图片为一组测试。对于每一组中的三个图片，左起第一个为原灰度图像，中间为经过算法变换后的沿着过中心的横线的灰度变化图，右起第一个则为中间图像在红色方框处的放大后的图像。容易看到经过改进的盒子滤波更接近原图像的像素值，能更好的保留边缘（edge-preserving）。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="analysis.png" alt="analysis" title="">                </div>                <div class="image-caption">analysis</div>            </figure><h2 id="Evaluation"><a class="header-anchor" href="#Evaluation">¶ </a>Evaluation</h2><p>我们将侧边滤波算法部署到了现有的滤波算法上，并在不同的应用方面进行了实际测试。<strong>由于涉及方面过多，时间有限无法深入调研，下面仅进行简要描述并附上实验结果。</strong></p><p>对于图中常用的算法缩写，解释如下：</p><ul><li>BOX 盒子滤波 均值滤波</li><li>GAU 高斯滤波</li><li>MED 中值滤波</li><li>BIL 双边滤波</li><li>GUI 导向滤波 guided filter</li></ul><h3 id="图像平滑"><a class="header-anchor" href="#图像平滑">¶ </a>图像平滑</h3><p>图像平滑用于减少图片的噪声或是产生锯齿较少的图片。大部分平滑化方法基于低通滤波器。</p><blockquote><p>Smoothing is often used to reduce noise within an image or to produce a less pixelated image. Most smoothing methods are based on low pass filters.<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup></p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="image_smoothing.png" alt="image smoothing" title="">                </div>                <div class="image-caption">image smoothing</div>            </figure><h3 id="图像去噪"><a class="header-anchor" href="#图像去噪">¶ </a>图像去噪</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="image_denoising.png" alt="image denoising" title="">                </div>                <div class="image-caption">image denoising</div>            </figure><h3 id="图像增强"><a class="header-anchor" href="#图像增强">¶ </a>图像增强</h3><p>图像增强的主要目的是处理给定的图像，以使结果比原始图像更适合特定的应用。它可以突出或锐化图像特征（例如边缘，边界或对比度），从而使图形显示更有助于展示和分析。增强功能不会增加数据的固有信息内容，但是会增加所选功能的动态范围，使得他们可以轻松被检测到。</p><blockquote><p>The principal objective of image enhancement is to process a given image so that the result is more suitable than the original image for a specific application.</p><p>It accentuates or sharpens image features such as edges, boundaries, or contrast to make a graphic display more helpful for display and analysis.</p><p>The enhancement doesn’t increase the inherent information content of the data, but it increases the dynamic range of the chosen features so that they can be detected easily. <sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup></p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="image_enhancement.png" alt="image enhancement" title="">                </div>                <div class="image-caption">image enhancement</div>            </figure><h3 id="HDR-色调映射"><a class="header-anchor" href="#HDR-色调映射">¶ </a>HDR 色调映射</h3><p>HDR 色彩映射指的是是将高动态范围成像（HDR）的图像映射到有限的范围（例如打印结果，LCD 显示器，投影仪）内。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="hdr.png" alt="hdr" title="">                </div>                <div class="image-caption">hdr</div>            </figure><h3 id="在自然图像上保留结构和去除纹理"><a class="header-anchor" href="#在自然图像上保留结构和去除纹理">¶ </a>在自然图像上保留结构和去除纹理</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="structure_preserving.png" alt="matual structure" title="">                </div>                <div class="image-caption">matual structure</div>            </figure><h3 id="相互结构提取"><a class="header-anchor" href="#相互结构提取">¶ </a>相互结构提取 <sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup></h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="matual_structure.png" alt="structure preserving" title="">                </div>                <div class="image-caption">structure preserving</div>            </figure><h3 id="Colorization"><a class="header-anchor" href="#Colorization">¶ </a>Colorization</h3><p>图像上色是一种借助计算机给单色图像或电影添加颜色的过程。这个过程通常会将图像分割为多个区域并且在多个图像序列中追踪这些区域。</p><blockquote><p>Colonization is a computer-assisted process of adding color to a monochrome image or movie. The process typically involves segmenting images into regions and tracking these regions across image sequences. <sup class="footnote-ref"><a href="#fn6" id="fnref6">[6]</a></sup></p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="colorization.png" alt="colorization" title="">                </div>                <div class="image-caption">colorization</div>            </figure><h2 id="Complexity-Anylysis"><a class="header-anchor" href="#Complexity-Anylysis">¶ </a>Complexity Anylysis</h2><p>显然，在应用侧边窗口算法后，时间复杂度的<strong>次数</strong>是不变的。但由于多遍历了几个子窗口，时间复杂度应当是原先的<strong>常数倍</strong>。具体地，我们对不同算法的时间复杂度进行了测试。实验环境为</p><ul><li>包含有 1 Mega 像素的灰度图</li><li>3.5GHz Intel core Xeon® CPU</li></ul><p>结果为</p><table><thead><tr><th>Method</th><th>BOX</th><th>GAU</th><th>MED</th><th>BIL</th><th>GUI</th></tr></thead><tbody><tr><td>Original</td><td>0.052</td><td>0.023</td><td>1.16</td><td>8.69</td><td>0.131</td></tr><tr><td>SWF version</td><td>0.215</td><td>0.23</td><td>3.67</td><td>26.2</td><td>0.431</td></tr></tbody></table><p>可以看到耗时为原先的2到10倍不等。</p><h2 id="Conclusion"><a class="header-anchor" href="#Conclusion">¶ </a>Conclusion</h2><ul><li>传统的图像处理算法将以像素为中心的正方形作为处理窗口，而我们指出这一取法并不是最优的，我们可以将窗口缩小为原先正方形的一个半边或是角落，从而提出<strong>侧边窗口滤波</strong>（SWF）。</li><li>许多流行的线性、非线性的滤波算法都可以很轻松地在侧边窗口滤波的基础上进行扩展，而且扩展后的算法能更好地保留边缘，提升性能，避免如颜色泄漏的伪像问题。</li><li>基于窗口的操作近些年来在计算机视觉、包括卷积神经网络在内的机器学习领域内被广泛使用。而 SWF 的一些原则，例如将操作窗口的边缘或是角落对齐到待操作像素，虽然看起来微不足道，但实际上扎根于许多算法的基本假设。我们的理论分析和在最新应用领域的实验都证明了其有效性。我们相信 SWF 原则会使更多的应用受益。</li></ul><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>事实上，我认为原文中这一部分的说明不严谨，不够令人信服 <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p>函数 $f$ 在 $a$ 点进行泰勒展开：$f(x) = \sum_{n=0}^{\infty} \frac{f^{(n)}(a)}{n!} (x - a)^n$ <a href="#fnref2" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p><a href="https://caligari.dartmouth.edu/doc/idl/html_6.2/Smoothing_an_Image.html" target="_blank" rel="noopener">https://caligari.dartmouth.edu/doc/idl/html_6.2/Smoothing_an_Image.html</a> <a href="#fnref3" class="footnote-backref">↩︎</a></p></li><li id="fn4" class="footnote-item"><p><a href="http://www.eie.polyu.edu.hk/~enyhchan/imagee.pdf" target="_blank" rel="noopener">http://www.eie.polyu.edu.hk/~enyhchan/imagee.pdf</a> <a href="#fnref4" class="footnote-backref">↩︎</a></p></li><li id="fn5" class="footnote-item"><p><a href="http://www.cse.cuhk.edu.hk/leojia/projects/mutualstructure/index.html" target="_blank" rel="noopener">http://www.cse.cuhk.edu.hk/leojia/projects/mutualstructure/index.html</a> <a href="#fnref5" class="footnote-backref">↩︎</a></p></li><li id="fn6" class="footnote-item"><p><a href="https://www.researchgate.net/publication/2896183_Colorization_using_Optimization" target="_blank" rel="noopener">https://www.researchgate.net/publication/2896183_Colorization_using_Optimization</a> <a href="#fnref6" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这是计算机视觉的课程作业&lt;/p&gt;
&lt;h2 id=&quot;Introduction&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#Introduction&quot;&gt;¶ &lt;/a&gt;Introduction&lt;/h2&gt;
&lt;h3 id=&quot;Background&quot;&gt;&lt;a class
      
    
    </summary>
    
    
    
      <category term="computer vision" scheme="http://yoursite.com/tags/computer-vision/"/>
    
      <category term="denoise" scheme="http://yoursite.com/tags/denoise/"/>
    
      <category term="filter" scheme="http://yoursite.com/tags/filter/"/>
    
  </entry>
  
</feed>
